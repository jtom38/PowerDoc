<#
.Synopsis 
This takes the information that was sent and builds a markdown file.

.Description
This is a private function so it is not exposed.

.Parameter FunctionName
Type: String
Lets the process know what to name the file and alo what the header will be.

.Parameter HelpDocs
Type: HashTable
Contains all the information that was exposed with the Get-Help $FunctionName.

.Outputs
[void]

.Example
Export-FunctionToMarkdown -FunctionName "Start-PowerDoc" -HelpDocs Get-Help Start-PowerDoc
#>

function Export-FunctionToMarkdown {
    param (
        [string] $FunctionName,
        [hashtable] $HelpDocs
    )
    
    Process {

        if ( $HelpDocs.Count -eq 0 ) {
            Write-Host " [x] $($FunctionName).md failed to generate.  No documentation was found to extract." -ForegroundColor Red
            Continue
        }

        $dt = [datetime]::Now.ToShortDateString()        

        # Generate Markdown file
        $name = "$($FunctionName).md"
        $path = "$($Global:PowerDoc.PathOutput)\"
        $export = "$($path)$($name)"

        if ( [System.IO.File]::Exists($export) -eq $true ) {
            [System.IO.File]::Delete($export)
        }
        New-Item -Name $name -Path $path | Out-Null
        
        # Start building md file
        # Insert Function name
        Add-Content -Path $export -Value "# $FunctionName"
        Add-Content -Path $export -Value ''            

        # Check for .Synopsis
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("synopsis")){
                Add-Content -Path $export -Value "## $($K.key)"
                Add-Content -Path $export -Value ''

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item"
                }
                Add-Content -Path $export -Value ''
            }
        }

        # Check for .Description
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("description")){
                Add-Content -Path $export -Value "## $($K.key)"
                Add-Content -Path $export -Value ''

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item"
                }
                Add-Content -Path $export -Value ''
            }
        }
        
        # Check for .Parameter
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("parameter ")){
                Add-Content -Path $export -Value "### $($K.key)"
                Add-Content -Path $export -Value ''

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item`r`n"
                }
                Add-Content -Path $export -Value ''
            }
        }

        # Check for .Outputs
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("outputs")){
                Add-Content -Path $export -Value "## $($K.key)"
                Add-Content -Path $export -Value ''

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item`r`n"
                }
                Add-Content -Path $export -Value ''
            }
        }

        # Check for .Example
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("example")){
                Add-Content -Path $export -Value "## $($K.key)"
                Add-Content -Path $export -Value ''

                Add-Content -Path $export -Value '```PowerShell'
                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item`r`n"
                }
                Add-Content -Path $export -Value '```'
                Add-Content -Path $export -Value ''
            }
        }

        Add-Content -Path $export -Value "Generated by [PowerDoc](https://github.com/luther38/PowerDoc)"
        Add-Content -Path $export -Value "Last updated: $dt"

        Write-Host " [o] $($FunctionName).md is finished generating" -ForegroundColor Green
    
    }

}