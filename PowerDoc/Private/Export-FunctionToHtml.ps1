
<#
.Description
This function takes all the extracted information from classes or functions and converts it to a HTML file.  
This is a private function that will not be exposed.

.Example
Export-FunctionToHtml -FunctionName "Export-ToHtml" -HelpDocs Get-Help 

#>

function Export-FunctionToHtml {
    param (
        [string] $FunctionName,
        [hashtable] $HelpDocs
    )
    
    Process {
        
        if ( $HelpDocs.Count -eq 0 ) {
            Write-Host " [x] $($FunctionName).html failed to generate.  No documentation was found to extract." -ForegroundColor Red
            Continue
        }

        $dt = [datetime]::Now.ToShortDateString()        

        # Generate HTML file
        $name = "$($FunctionName).html"
        $path = "$($Global:PowerDoc.PathOutput)\"
        $export = "$($path)$($name)"

        if ( [System.IO.File]::Exists($export) -eq $true ) {
            [System.IO.File]::Delete($export)
        }
        New-Item -Name $name -Path $path | Out-Null
        
        # Start building md file
        # Insert Function name
        Add-Content -Path $export -Value "<h1>$FunctionName</h1>"
        Add-Content -Path $export -Value '<hr>'

        Add-Content -Path $export -Value '<h2>Help Documentation</h2>'
        Add-Content -Path $export -Value '<br>'

        # Check for .Synopsis
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("synopsis")){
                Add-Content -Path $export -Value "<h3>$($K.key)</h3>"

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item<br>"
                }
                Add-Content -Path $export -Value '<br><br>'
            }
        }

        # Check for .Description
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("description")){
                Add-Content -Path $export -Value "<h3>$($K.key)</h3>"

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item<br>"
                }
                Add-Content -Path $export -Value '<br><br>'
            }
        }
        
        # Check for .Parameter
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("parameter ")){
                Add-Content -Path $export -Value "<h3>$($K.key)</h3>"

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item<br>"
                }
                Add-Content -Path $export -Value '<br><br>'
            }
        }

        # Check for .Outputs
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("outputs")){
                Add-Content -Path $export -Value "<h3>$($K.key)</h3>"

                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item<br>"
                }
                Add-Content -Path $export -Value '<br><br>'
            }
        }

        # Check for .Example
        foreach( $k in $HelpDocs.GetEnumerator() ){
            if( $k.key.ToLower().Contains("example")){
                Add-Content -Path $export -Value "<h3>$($K.key)</h3>"

                Add-Content -Path $export -Value '<code>'
                foreach ($item in $k.Value){
                    Add-Content -Path $export -Value "$item`r`n"
                }
                Add-Content -Path $export -Value '</code>'
                Add-Content -Path $export -Value '<br><br>'
            }
        }
        
        Add-Content -Path $export -Value "Generated by <a href='https://github.com/luther38/PowerDoc'>PowerDoc</a><br>"
        Add-Content -Path $export -Value "Last updated: $dt"

        Write-Host " [o] $($FunctionName).html is finished generating" -ForegroundColor Green
    }
}