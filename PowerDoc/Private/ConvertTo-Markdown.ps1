function ConvertTo-Markdown {
    param (
        # Class Param
        [string] $FileName,
        [string] $ClassName,
        [string[]] $BaseClasses,
        [string[]] $Constructors,
        [string[]] $Properties,
        [string[]] $Methods

        # Function Param

    )
    
    Process {

        if ([System.String]::IsNullOrEmpty($ClassName) -eq $false -and
            [System.String]::IsNullOrEmpty($FileName) -eq $false -and
            [System.String]::IsNullOrEmpty($Constructors) -eq $false -and 
            [System.String]::IsNullOrEmpty($Properties) -eq $false -and
            [System.String]::IsNullOrEmpty($Methods) -eq $false ) {

            $dt = [datetime]::Now.ToShortDateString()
            <#
            [string[]] $Template = @(
                "# $ClassName",
                '',
                '## Constructors',
                '',
                '```PowerShell',
                $Constructors,
                '```',
                '',
                '## Properties',
                '',                
                '```PowerShell',
                $Properties,
                '```',
                '',
                '## Methods',
                '',
                '```PowerShell',
                $Methods,
                '```',
                '',
                "Generated by [PowerDoc](https://github.com/luther38/PowerDoc) @ $($dt)"

            )
            #>
            
            # Generate Markdown file
            $name = "$($ClassName).md"
            $path = "$($Global:PowerDoc.PathOutput)\"
            New-Item -Name $name -Path $path | Out-Null

            $export = "$($path)$($name)"
            
            # Start building md file
            # Insert class name
            Add-Content -Path $export -Value "# $ClassName"
            Add-Content -Path $export -Value ''
            
            # If we have Base Classes, export
            if ( [System.String]::IsNullOrEmpty($BaseClasses) -eq $false) {
                Add-Content -Path $export -Value "## Base Classes"
                Add-Content -Path $export -Value ''
                foreach( $i in $BaseClasses){
                    Add-Content -Path $export -Value "$i"                    
                }                
                Add-Content -Path $export -Value ''
            }

            if ( [System.String]::IsNullOrEmpty($Constructors) -eq $false ) {
                Add-Content -Path $export -Value "## Constructors"
                Add-Content -Path $export -Value ''
                Add-Content -Path $export -Value '```PowerShell'
                foreach( $i in $Constructors){
                    Add-Content -Path $export -Value "$i"                    
                }
                Add-Content -Path $export -Value '```'
                Add-Content -Path $export -Value ''
            }
            
            if ( [System.String]::IsNullOrEmpty($Properties) -eq $false ) {
                Add-Content -Path $export -Value "## Properties"
                Add-Content -Path $export -Value ''
                Add-Content -Path $export -Value '```PowerShell'
                foreach( $i in $Properties){
                    Add-Content -Path $export -Value "$i"                    
                }
                Add-Content -Path $export -Value '```'
                Add-Content -Path $export -Value ''
            }

            if ( [System.String]::IsNullOrEmpty($Methods) -eq $false ) {
                Add-Content -Path $export -Value "## Methods"
                Add-Content -Path $export -Value ''
                Add-Content -Path $export -Value '```PowerShell'
                foreach( $i in $Methods){
                    Add-Content -Path $export -Value "$i"                    
                }
                Add-Content -Path $export -Value '```'
                Add-Content -Path $export -Value ''
            }

            Add-Content -Path $export -Value "Generated by [PowerDoc](https://github.com/luther38/PowerDoc) @ $($dt)"

            <#
            foreach($line in $Template){
                Add-Content -Path $export -Value $line
            }
            #>

            Write-Host "Export of [$($ClassName).md] is finished."

        }

    }

}